
NB: - These are notes. They are incomplete and not yet a coherent draft or
      proposal.

    - This document uses terms as defined in system-overview.txt.

# Context 

This document proposes a UDP network protocol for bi-directional data
acquisition and control communications between a "Wired Leaf" FPGA device and a
daemon running on an analysis server or user workstation.

As a design goal, this protocol SHOULD be implementable in raw digital logic on
the FPGA device without relying on a soft-core or hard-core general purpose
processor.

The FPGA can/should be processing one command or request (aside from live data
streaming) at a time; if another request arrives while processing, it will
reply with a generic error.

Two UDP sockets are used: one bi-directional command socket, and one
uni-directional data socket streaming from the FPGA board to the computer.




# Packet Format

TODO: decide on port numbers

There is a command socket and a data socket. It may be possible to combine the
two and operate on a single socket in the future, or, if a processor is added
to the FPGA board it may be possible to change the lower-bandwidth command
socket to be TCP.

The source address serves to identify the unique acquisition device.

    [UDP/IPv4 pseudo header]
        Source address (4byte)
        Destination address (4byte)
        Zeros (0x00) | Protocol Number (0x11 for UDP) | UDP length (2byte)
    [UDP header]
        Source Port (2byte) | Destination Port (2byte)
        Length (2byte) | Checksum (2byte)
    [SNG Wire Format Header]
        Magic number (1byte) | Proto Version (1byte) | Message Type (1byte) | Misc Flags (1byte)
    [SNG Message-Specific Data]

Standard Flags:
- Error condition (in any response) indicates that error register should be
  read/cleared

## Message Types

#### Error

Can be used to indicate that there is an error which should be read out. Sent
only from the FPGA board to the computer on the command socket.

This packet contains no data, it just has the Error flag set. An error
condition can also be detected in any response packet with the flag set high.

#### Request

Request types:
- chip configure (chip ID or all, register addr, register data)
- chip query (chip ID or all, register addr, register data)
- system configure
- system query
- start acquire
- stop acquire
- read samples from disk

    Request ID (2byte) | Request Type (1byte) | Address (1byte, or zeros)
    Request value (4 bytes, or zero)

TODO: should request ID be random? or ordered? larger?

#### Response

Same types as request.

    Response ID (2byte) | Response Type (1byte) | Address (1byte, or zeros)
    Response value (4 bytes, or zero)

#### Board Sample

Contains 1k (or later up to 3k) channel samples.

Contains up to 32 chips x 32 channels x 16bit x 1 sample, plus lower frequency
extras (eg, the 32 chips x 3 channels x 16bit of auxiliary ADC input, sampled
at, eg, 10kHz).

Flags:
- is_live (live acquisition vs. read from disk)
- is_last_sample (no more samples will follow; makes daemon control structure
  much simpler)

    Sample Index (4byte)
    NCHIP = number of chips/board (2byte) | NCHAN = number of channels/chip (2byte)
                [following is 2KB worth of sample data]
    Chip 0, Chan 0 data (2 byte) | Chip 0, Chan 1 data (2 byte)
    Chip 0, Chan 2 data (2 byte) | Chip 0, Chan 3 data (2 byte)
    [...]
    Chip 0, Chan NCHAN-2 data (2 byte) | Chip 0, Chan NCHAN-1 data (2 byte)
    Chip 1, Chan 0 data (2 byte) | Chip 1, Chan 1 data (2 byte)
    [...]
    Chip NCHIP, Chan NCHAN-2 data (2 byte) | Chip NCHIP, Chan NCHAN-1 data (2 byte)


